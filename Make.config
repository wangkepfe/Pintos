# -*- makefile -*-

SHELL = /bin/sh

VPATH = $(SRCDIR)

# Binary utilities.
# If the host appears to be x86, use the normal tools.
# If it's x86-64, use the compiler and linker in 32-bit mode.
# Otherwise assume cross-tools are installed as i386-elf-*.
X86 = i.86\|pentium.*\|[pk][56]\|nexgen\|viac3\|6x86\|athlon.*\|i86pc
X86_64 = x86_64
ifneq (0, $(shell expr `uname -m` : '$(X86)'))
  CC = gcc
  LD = ld
  OBJCOPY = objcopy
else
  ifneq (0, $(shell expr `uname -m` : '$(X86_64)'))
    CC = gcc -m32
    LD = ld -melf_i386
    OBJCOPY = objcopy
  else
    CC = i386-elf-gcc
    LD = i386-elf-ld
    OBJCOPY = i386-elf-objcopy
  endif
endif

ifeq ($(strip $(shell command -v $(CC) 2> /dev/null)),)
$(warning *** Compiler ($(CC)) not found.  Did you set $$PATH properly?  Please refer to the Getting Started section in the documentation for details. ***)
endif

# filst04@liu 2014-01: added to support some Linux distributions
# klaar36@ida 2014-01: which architecture, compiler and system
#                      combinations need this? 
ifneq (0, $(shell expr `uname -s` : 'Linux'))
  # not supported by SunOS cross compiler
  CFLAG_STACK_PROTECTOR = -fno-stack-protector
  LDFLAG_BUILD_ID = -Wl,--build-id=none
else
  CFLAG_STACK_PROTECTOR =
  LDFLAG_BUILD_ID =
endif

# Compiler and assembler invocation.
DEFINES =
WARNINGS = -Wall -W -Wstrict-prototypes -Wmissing-prototypes -Wsystem-headers
CFLAGS =  -g -msoft-float -O $(CFLAG_STACK_PROTECTOR)
CPPFLAGS =  -nostdinc -I$(SRCDIR) -I$(SRCDIR)/lib
ASFLAGS = -Wa,--gstabs
LDFLAGS = 
DEPS = -MMD -MF $(@:.o=.d)

%.o: %.c
	$(CC) -c $< -o $@ $(CFLAGS) $(CPPFLAGS) $(WARNINGS) $(DEFINES) $(DEPS)

%.o: %.S
	$(CC) -c $< -o $@ $(ASFLAGS) $(CPPFLAGS) $(DEFINES) $(DEPS)
